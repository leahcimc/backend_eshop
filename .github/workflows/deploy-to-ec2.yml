name: Deploy to EC2

on: # specify the build to trigger the automated ci/cd
   push:
     branches:
           - master
           
jobs:
   deploy:
     runs-on: ubuntu-latest # specify the build machine
     steps:
         - # checkout to the repository on the build machine
             name: Checkout code
             uses: actions/checkout@v3

         - # Set up JDK 17 
             name: Set up JDK 17
             uses: actions/setup-java@v3
             with:
              java-version: '17'
              distribution: 'temurin'

         - # Assemble the project with Gradle Wrapper to jar file
             name: Make gradlew executable
             run: chmod +x ./gradlew
         - name: Setup Gradle
           uses: gradle/gradle-build-action@v2
         - name: Run assemble with Gradle Wrapper
           run: ./gradlew assemble
 
         - # Login to Docker Hub
             name: Login to Docker Hub
             uses: docker/login-action@v2
             with:
               username: ${{ secrets.DOCKERHUB_USERNAME }}
               password: ${{ secrets.DOCKERHUB_TOKEN }}
 
         - # Build Docker image
             name: Build Docker image
             run: docker build -t project_backend .
 
         - # Tag Docker image
             name: Tag Docker image
             run: docker tag project-backend ${{ secrets.DOCKERHUB_USERNAME }}/project-backend:${{ github.sha }}
 
         - # Push Docker image
             name: Push Docker image
             run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/project-backend:${{ github.sha }}
 
         - # SSH into EC2 instance and Docker Pull, Stop, Remove and Run
             name: SSH into EC2 instance
             uses: appleboy/ssh-action@v0.1.6
             with:
                host: ${{ secrets.EC2_HOST }}
                username: ${{ secrets.EC2_USERNAME }}
                key: ${{ secrets.EC2_PRIVATE_KEY }}
                port: ${{ secrets.EC2_SSH_PORT }}
                script: |
                  docker login
                  docker pull ${{ secrets.DOCKERHUB_USERNAME }}/project_backend:${{ github.sha }}
                  docker stop project_backend
                  docker rm project_backend
                  docker run -d --name project_backend -p 8080:8080 ${{ secrets.DOCKERHUB_USERNAME }}/project_backend:${{ github.sha }}
